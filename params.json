{"name":"Path finding","tagline":"A path finding library for Dart","body":"# path_finding\r\nA pathfinding library for Dart\r\nFind it on pub at https://pub.dartlang.org/packages/path_finding\r\n\r\nTo use it in your project add\r\n```\r\npath_finding: \">=0.3.0 <0.4.0\"\r\n```\r\nto your pubspec.yaml under depencies.\r\n\r\n# Examples\r\n\r\n## A* Finder\r\n\r\n```dart\r\nimport 'package:path_finding/path_finding.dart';\r\nimport 'dart:math' show Point;\r\n\r\nvoid main() {\r\n  List<List<bool>> boolGrid = [\r\n    [true,  false, true],\r\n    [true,  true,  true ],\r\n    [true,  false, true ]\r\n  ];\r\n\r\n  Grid grid = new Grid(boolGrid);\r\n  grid.diagonalMovement = DiagonalMovement.Never;\r\n\r\n  PointNode start = grid.nodeFromPoint(new Point(0, 0));\r\n  PointNode goal = grid.nodeFromPoint(new Point(2, 2));\r\n\r\n  AStarFinder aStarFinder = new AStarFinder(grid);\r\n\r\n  List<PointNode> path = aStarFinder.pathFind(start, goal);\r\n\r\n  for (PointNode node in path) {\r\n    print(node.location);\r\n  }\r\n}\r\n```\r\n\r\n## Dijkstra Finder\r\n\r\n```dart\r\nimport 'package:path_finding/path_finding.dart';\r\nimport 'dart:math' show Point;\r\n\r\nvoid main() {\r\n  List<List<bool>> boolGrid = [\r\n    [true,  false, false, true],\r\n    [true,  true,  false, true],\r\n    [false, true,  true,  true]\r\n  ];\r\n\r\n  Grid grid = new Grid(boolGrid);\r\n  grid.diagonalMovement = DiagonalMovement.Never;\r\n\r\n  PointNode start = grid.nodeFromPoint(new Point(0, 0));\r\n  PointNode goal = grid.nodeFromPoint(new Point(3, 0));\r\n\r\n  DijkstraFinder dijkstraFinder = new DijkstraFinder(grid);\r\n\r\n  List<PointNode> path = dijkstraFinder.pathFind(start, goal);\r\n\r\n  for (PointNode point in path) {\r\n    print(point.location);\r\n  }\r\n}\r\n```\r\n\r\n## UndirectedPointGraph \r\n\r\n```dart    \r\nimport 'package:path_finding/path_finding.dart';\r\nimport 'dart:math' show Point;\r\n\r\nvoid main() {\r\n  UndirectedPointGraph undirectedGraph = new UndirectedPointGraph();\r\n\r\n  PointNode A = new PointNode(new Point(0, 0));\r\n  PointNode B = new PointNode(new Point(1, 1));\r\n  PointNode C = new PointNode(new Point(3, 2));\r\n  PointNode D = new PointNode(new Point(2, 7));\r\n  PointNode E = new PointNode(new Point(4, 5));\r\n\r\n  undirectedGraph.addAdjacency(A, B);\r\n  undirectedGraph.addAdjacency(B, C);\r\n  undirectedGraph.addAdjacency(B, D);\r\n  undirectedGraph.addAdjacency(C, D);\r\n  undirectedGraph.addAdjacency(B, E);\r\n  undirectedGraph.addAdjacency(C, E);\r\n\r\n  AStarFinder aStarFinder = new AStarFinder(undirectedGraph);\r\n\r\n  List<PointNode> path = aStarFinder.pathFind(A, E);\r\n\r\n  for (PointNode node in path) {\r\n    print(node.location);\r\n  }\r\n}\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}